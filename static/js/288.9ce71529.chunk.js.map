{"version":3,"file":"static/js/288.9ce71529.chunk.js","mappings":"qMACaA,EAAW,SAAC,GAAqB,IAApBC,EAAmB,EAAnBA,KAAmB,IAAbC,KAAAA,OAAa,MAAR,GAAQ,EACnCC,GAAWC,EAAAA,EAAAA,MACjB,OAAO,wBACFH,EAAKI,KAAI,gBAAEC,EAAF,EAAEA,MAAOC,EAAT,EAASA,GAAT,OAAiB,yBAAa,SAAC,KAAD,CAASC,GAAE,UAAKN,GAAL,OAAYK,GAAME,MAAO,CAACC,KAAMP,GAA3C,SAAuDG,KAA3DC,EAA1B,KAEjB,C,oGCJYI,E,OAAaC,GAAAA,KAAH,qP,SCCVC,EAAa,SAAC,GAAgB,IAAfC,EAAc,EAAdA,SACxB,GAAoCC,EAAAA,EAAAA,UAAS,IAA7C,eAAOC,EAAP,KAAmBC,EAAnB,KAaA,OAAO,UAACN,EAAD,CAAYG,SARG,SAAAI,GAClBA,EAAMC,iBACFH,IAGJF,EAAS,CAACM,QAASJ,EAAWK,SAC9BJ,EAAc,IACjB,EACM,WACH,kBACIK,KAAK,OACLC,SAfa,SAAAL,GACjB,IAAOM,EAASN,EAAMO,OAAfD,MACPP,EAAcO,EACjB,EAaOA,MAAOR,KAEX,mBAAQM,KAAK,SAAb,sBAEP,E,kBCaD,EA/Be,SAAC,GAAyB,IAAxBI,EAAuB,EAAvBA,IAAKC,EAAkB,EAAlBA,aAClB,GAAwCC,EAAAA,EAAAA,MAAxC,eAAOC,EAAP,KAAqBC,EAArB,KACMV,EAAUS,EAAaE,IAAI,WACjC,GAA0BhB,EAAAA,EAAAA,UAAS,IAAnC,eAAOiB,EAAP,KAAcC,EAAd,KAoBA,OAnBAC,EAAAA,EAAAA,YAAU,WACFd,IAGJO,GAAa,GACbD,EAAIS,iBAAiBf,GACpBgB,MAAK,SAAAC,GACyB,IAAxBA,EAAKC,QAAQC,QAGhBN,EAASI,EAAKC,QACjB,IACAE,OAAM,SAAAC,GACHC,QAAQC,IAAIF,EACf,IACAG,SAAQ,WACLjB,GAAa,EAChB,IACJ,GAAE,CAACP,EAASM,EAAKC,KACZ,6BACF,SAACd,EAAD,CAAYC,SAAUgB,IACrBE,EAAMO,OAAS,IACZ,SAACvC,EAAA,EAAD,CAAUC,KAAM+B,MAG3B,C","sources":["components/FilmList/FilmList.jsx","components/SearchFrom/SearchFromStyled.jsx","components/SearchFrom/SearchFrom.jsx","pages/Movies.jsx"],"sourcesContent":["import { NavLink, useLocation } from \"react-router-dom\";\nexport const FilmList = ({list, path=''}) => {\n    const location = useLocation();\n    return <ul>\n        {list.map(({title, id}) => <li key={id}><NavLink to={`${path}${id}`} state={{from: location}}>{title}</NavLink></li>)}\n    </ul>\n}","import styled from \"styled-components\";\n\nexport const StyledForm = styled.form`\n    margin-top: 40px;\n    padding-left: 10px;\n    & input{\n        box-sizing: border-box;\n        width: 300px;\n        height: 30px;\n        margin-right: 3px;\n    }\n    & button{\n        height: 30px;\n    }\n`","import { useState } from \"react\"\nimport { StyledForm } from \"./SearchFromStyled\";\n\nexport const SearchForm = ({onSubmit}) => {\n    const [searchWord, setSearchWord] = useState(\"\");\n    const chageHendler = event => {\n        const {value} = event.target;\n        setSearchWord(value);\n    }\n    const submitHendler = event => {\n        event.preventDefault();\n        if(!searchWord){\n            return\n        }\n        onSubmit({keyword: searchWord.trim()});\n        setSearchWord(\"\");\n    }\n    return <StyledForm onSubmit={submitHendler}>\n        <input \n            type=\"text\" \n            onChange={chageHendler} \n            value={searchWord}\n        />\n        <button type=\"submit\">Search</button>\n    </StyledForm>\n}","import { SearchForm } from \"components/SearchFrom/SearchFrom\"\nimport { useSearchParams } from \"react-router-dom\"\nimport { useEffect, useState } from \"react\";\nimport { FilmList } from \"components/FilmList/FilmList\";\n\n\n\nconst Movies = ({api, setIsLoading}) => {\n    const [searchParams, setSearchParams] = useSearchParams();\n    const keyword = searchParams.get('keyword');\n    const [films, setFilms] = useState([]);\n    useEffect(() => {\n        if(!keyword){\n            return;\n        }\n        setIsLoading(true);\n        api.getMoviByKeyword(keyword)\n        .then(data => {\n            if(data.results.length === 0){\n                return;\n            }\n            setFilms(data.results);\n        })\n        .catch(err => {\n            console.log(err);\n        })\n        .finally(() => {\n            setIsLoading(false)\n        })\n    }, [keyword, api, setIsLoading])\n    return<main>\n        <SearchForm onSubmit={setSearchParams}/>\n        {films.length > 0 && \n            <FilmList list={films}/>\n        }\n    </main>\n}\n\nexport default Movies;"],"names":["FilmList","list","path","location","useLocation","map","title","id","to","state","from","StyledForm","styled","SearchForm","onSubmit","useState","searchWord","setSearchWord","event","preventDefault","keyword","trim","type","onChange","value","target","api","setIsLoading","useSearchParams","searchParams","setSearchParams","get","films","setFilms","useEffect","getMoviByKeyword","then","data","results","length","catch","err","console","log","finally"],"sourceRoot":""}