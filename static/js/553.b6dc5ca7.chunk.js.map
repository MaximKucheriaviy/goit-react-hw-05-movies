{"version":3,"file":"static/js/553.b6dc5ca7.chunk.js","mappings":"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","sources":["webpack://goit-react-hw-05-movies/./src/components/CastInfo/styles.module.scss?94dc","components/CastInfo/CastInfo.jsx","pages/Cast.jsx","../node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js","servises/themoviedbAPI.js"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"thumb\":\"styles_thumb__G86Ou\"};","import styles from './styles.module.scss';\n\nexport const CastInfo = ({cast}) =>{\n    const {character, profile_path, name} = cast;\n    return <div>\n        <div className={styles.thumb}>\n            <img src={profile_path} alt={name} />\n        </div>\n        <p>{name}</p>\n        <p>{\"Character: \"}<span>{character}</span></p>\n    </div>\n}","import { useParams } from \"react-router-dom\";\nimport { useState, useEffect } from \"react\";\nimport { CastInfo } from \"components/CastInfo/CastInfo\";\nimport { api } from \"servises/themoviedbAPI\";\n\nconst Cast = ({isLoading}) => {\n    const {movieId} = useParams();\n    const [cast, setCast] = useState([]);\n    useEffect(() => {\n        isLoading(true)\n        api.getMoviCredits(movieId)\n        .then(data => {\n            setCast(data.cast)\n        })\n        .catch(err => {\n            console.log(err);\n        })\n        .finally(() => {\n            isLoading(false);\n        })\n    }, [movieId, isLoading]);\n    \n    return <>\n        {cast.length > 0 &&\n            <ul>\n                {cast.map((item, index) => <li key={item.id + index}><CastInfo cast={item}/></li>)}\n            </ul>\n            \n        }\n    </>  \n}\n\nexport default Cast;","function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) {\n  try {\n    var info = gen[key](arg);\n    var value = info.value;\n  } catch (error) {\n    reject(error);\n    return;\n  }\n\n  if (info.done) {\n    resolve(value);\n  } else {\n    Promise.resolve(value).then(_next, _throw);\n  }\n}\n\nexport default function _asyncToGenerator(fn) {\n  return function () {\n    var self = this,\n        args = arguments;\n    return new Promise(function (resolve, reject) {\n      var gen = fn.apply(self, args);\n\n      function _next(value) {\n        asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"next\", value);\n      }\n\n      function _throw(err) {\n        asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"throw\", err);\n      }\n\n      _next(undefined);\n    });\n  };\n}","import logo from \"logo192.png\";\n\nclass TMDB {\n    constructor(key = \"1cdff00a9c2b2133227357e455cd1931\"){\n        this.apiKey = key;\n        this.imageURL = \"https://image.tmdb.org/t/p/w500\";\n        this.genreNeaded = true;\n        this.genders = [];\n    }\n    async getTrendings(page = 1){\n        try{\n            await this.getGenres();\n            const response = await fetch(`https://api.themoviedb.org/3/trending/movie/day?api_key=${this.apiKey}&page=${page}`);\n            if(response.ok){\n                const data = await response.json();\n                return this.transfomResult(data);\n            }\n        }\n        catch(err){\n            console.log(err);\n        }\n    }\n    async getMoviByKeyword(query){\n        await this.getGenres();\n        try{\n            const response = await fetch(`https://api.themoviedb.org/3/search/movie?api_key=${this.apiKey}&query=${query}`);\n            if(response.ok){\n                const data = await response.json();\n                return this.transfomResult(data);\n            }\n        }\n        catch(err){\n            console.log(err);\n        }\n    }\n    async getMoviInfo(id){\n        await this.getGenres();\n        try{\n            const response = await fetch(`https://api.themoviedb.org/3/movie/${id}?api_key=${this.apiKey}`);\n            if(response.ok){\n                const data = await response.json();\n                return this.transfomResult(data);\n            }\n        }\n        catch(err){\n            console.log(err);\n        }\n    }\n    async getMoviCredits(id){\n        await this.getGenres();\n        try{\n            const response = await fetch(`https://api.themoviedb.org/3/movie/${id}/credits?api_key=${this.apiKey}`);\n            if(response.ok){\n                const data = await response.json();\n                data.cast = this.transfromCasts(data.cast);\n                return data;\n            }\n        }\n        catch(err){\n            console.log(err);\n        }\n    }\n    async getMoviReviews(id){\n        await this.getGenres();\n        try{\n            const response = await fetch(`https://api.themoviedb.org/3/movie/${id}/reviews?api_key=${this.apiKey}`);\n            if(response.ok){\n                const data = await response.json();\n                // data.cast = this.transfromCasts(data.cast);\n                return data;\n            }\n        }\n        catch(err){\n            console.log(err);\n        }\n    }\n    transfomResult(data){\n        if(Array.isArray(data.results)){\n            data.results = data.results.map(item => {\n                item.poster_path = this.imageURL + item.poster_path;\n                item.backdrop_path = this.imageURL + item.backdrop_path;\n                item.genre_ids = this.transfomGenders(item.genre_ids);\n                return item;\n            })\n        }\n        else{\n            data.poster_path = this.imageURL + data.poster_path;\n            data.backdrop_path = this.imageURL + data.backdrop_path;\n            data.genre_ids = this.transfomGenders(data.genre_ids);\n        }\n        return data;\n    }\n    async getGenres(){\n        if(this.genreNeaded){\n            this.genreNeaded = !this.genreNeaded;\n            const URL = `https://api.themoviedb.org/3/genre/movie/list?api_key=${this.apiKey}`\n            const URL2 = `https://api.themoviedb.org/3/genre/tv/list?api_key=${this.apiKey}`\n            try{\n                const response = await fetch(URL);\n                if(response.ok){\n                    const data = await response.json();\n                    this.genders.push(...data.genres);\n                }\n            }\n            catch(err){\n                console.error(\"Error in getGenres\")\n                console.log(err);\n            }\n            try{\n                const response = await fetch(URL2);\n                if(response.ok){\n                    const data = await response.json();\n                    this.genders.push(...data.genres);\n                }\n            }\n            catch(err){\n                console.error(\"Error in getGenres\")\n                console.log(err);\n            }\n        }\n    }\n    transfomGenders(arr = []){\n        if(this.genders.length < 1){\n            return arr;\n        }\n        arr = arr.map((id) => this.genders.find(item => item.id === id).name);\n        return arr;\n    }\n    transfromCasts(arr = []){\n        arr = arr.map(item => {\n            if(!item.profile_path){\n                item.profile_path = logo;\n                return item;\n            }\n            item.profile_path = this.imageURL + item.profile_path;\n            return item\n        });\n        return arr\n    }\n}\n\nexport default TMDB;\nexport const api = new TMDB();"],"names":["CastInfo","cast","character","profile_path","name","className","styles","src","alt","isLoading","movieId","useParams","useState","setCast","useEffect","api","then","data","catch","err","console","log","finally","length","map","item","index","id","asyncGeneratorStep","gen","resolve","reject","_next","_throw","key","arg","info","value","error","done","Promise","_asyncToGenerator","fn","self","this","args","arguments","apply","undefined","TMDB","apiKey","imageURL","genreNeaded","genders","page","getGenres","fetch","response","ok","json","transfomResult","query","transfromCasts","Array","isArray","results","poster_path","backdrop_path","genre_ids","transfomGenders","URL","URL2","push","genres","arr","find","logo"],"sourceRoot":""}